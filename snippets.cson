# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.c, .source.cpp, .source.objc, .source.objcpp':
  'stdlib':
    'prefix': 'stdlib'
    'body': '#include <stdlib.h>\n'

  'stdio':
    'prefix': 'stdio'
    'body': '#include <stdlio.h>\n'

  'unistd':
    'prefix': 'unistd, uni'
    'body': '#include <unistd.h>\n'

  'ft_putchar':
    'prefix': 'putc'
    'body': 'ft_putchar(${1:__});'

  'ft_putstr':
    'prefix': 'puts'
    'body': 'ft_putstr(${1:__});'

  'ft_strlen':
    'prefix': 'strl'
    'body': 'ft_strlen(${1:__});'

  'main()':
    'prefix': 'main, mc'
    'body': 'int\t\tmain(${1:int ac, char **av})\n{\n\t$2\n\treturn (0);\n}'

  '#ifndef … #define … #endif':
    'prefix': 'def'
    'body': '#ifndef ${1:__}\n# define $1 ${2:__}\n#endif'

  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:__}.h>'

  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:__}.h"'

  'If Condition':
    'prefix': 'if'
    'body': 'if (${1:__})\n\t${2:__};\n'

  'Else If Condition':
    'prefix': 'elif, efi'
    'body': 'else if (${1:__})\n\t${2:__};\n'

  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:__})\n\t${2:__};\nelse\n\t${3:__};\n'

  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:__})\n\t${2:__};\nelse if (${3:__})\n\t${4:__};\n'

  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:__})\n\t${2:__};\nelse if (${3:__})\n\t${4:__};\nelse\n\t${5:__};\n'

  'Ternary Condition':
    'prefix': 't?, ter'
    'body': '(${1:Condition}) ? ${2:Statement} : ${3:Statement};\n'

  'printf':
    'prefix': 'printf'
    'body': 'printf("%${1:s}\\\\n", ${2:__});$3'

  'Struct':
    'prefix': 'struct'
    'body': 'struct s_${1:name}\n{\n\t${2:__}\n};'

  'any function (UNSTABLE)':
    'prefix': 'func, ff'
    'body': '${1:type}\t${2:name}(${3:void})\n{\n\t$4\n\treturn (${5:0});\n}'

  'void function':
    'prefix': 'funcv, fv'
    'body': 'void\t${1:name}(${2:void})\n{\n\t$3\n}'

  'int function':
    'prefix': 'funci, fi'
    'body': 'void\t${1:name}(${2:void})\n{\n\t$3\n\treturn (${4:0});\n}'

  'char function':
    'prefix': 'funcc, fc'
    'body': 'void\t${1:name}(${2:void})\n{\n\t$3\n\treturn (${4:0});\n}'

  'function prototype':
    'prefix': 'proto, pf'
    'body': '${1:type}\t${2:name}(${3:void});'


# NATIVE SNIPPETS

  '#pragma mark':
    'prefix': 'mark'
    'body': '#if 0\n${1:#pragma mark -\n}#pragma mark $2\n#endif\n\n$0'
  'For Loop':
    'prefix': 'for'
    'body': '/* FORBIDDEN !!! */'
  'Header Include-Guard':
    'prefix': 'once'
    'body': '#ifndef ${1:SYMBOL}\n# define $1\n\n${2}\n\n#endif /* end of include guard: $1 */\n'
  'Shared Pointer':
    'prefix': 'sp'
    'body': 'typedef std::shared_ptr<${2:${1:my_type}_t}> ${3:${4:my_type}_ptr};'
  'Typedef':
    'prefix': 'td'
    'body': 'typedef ${1:type} $2;'
  'Do While Loop':
    'prefix': 'do'
    'body': '/* FORBIDDEN !!! */'
  'While Loop':
    'prefix': 'while'
    'body': 'while ($1)\n\t$2;\n'
  'fprintf':
    'prefix': 'fprintf'
    'body': 'fprintf(${1:stderr}, "${2:%s}\\\\n", $3);$4'
  'Switch Statement':
    'prefix': 'switch'
    'body': '/* FORBIDDEN !!! */'
  'case':
    'prefix': 'case'
    'body': '/* FORBIDDEN !!! */'
  'scanf':
    'prefix': 'scanf'
    'body': 'scanf(\"${1:%s}\\\\n\", $2);$3'
  'write file':
    'prefix': 'wf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","w");\nif (${1:fp}!=NULL)\n{\n\tfprintf(${1:fp},"${3:Some String\\\\n}");\n\tfclose (${1:fp});\n}'
  'read file':
    'prefix': 'rf'
    'body': 'FILE *${1:fp};\n${1:fp} = fopen ("${2:filename.txt}","r");\nif (${1:fp}!=NULL)\n{\n\tfscanf(${1:fp},"${3:Some String\\\\n}", ${3:&var});\n\tfclose (${1:fp});\n}'


'.source.cpp, .source.objcpp':
  'Enumeration':
    'prefix': 'enum'
    'body': 'enum ${1:name} { $0 };'
  'Class':
    'prefix': 'cl'
    'body': 'class ${1:name_t} {\nprivate:\n\t${0:/* data */}\n\npublic:\n\t${1:name_t} (${2:arguments});\n\tvirtual ~${1:name_t} ();\n};'
  'Namespace':
    'prefix': 'ns'
    'body': 'namespace ${1:name} {\n\t$2\n} /* $1 */'
  'cout':
    'prefix': 'cout'
    'body': 'std::cout << \"${1:/* message */}\" << \'\\\\n\';'
  'cin':
    'prefix': 'cin'
    'body': 'std::cin >> ${1:/* variable */};'
  'cerr':
    'prefix': 'cerr'
    'body': 'std::cerr << \"${1:/* error message */}\" << \'\\\\n\';'
  'std::map':
    'prefix': 'map'
    'body': 'std::map<${1:key}, ${2:value}> map$3;'
  'std::string':
    'prefix': 'str'
    'body': 'std::string'
  'std::vector':
    'prefix': 'vector'
    'body': 'std::vector<${1:int}> v$2;'
  'template <typename>':
    'prefix': 'tp'
    'body': 'template <typename ${1:T}>'
  'output file':
    'prefix': 'outf'
    'body': 'std::ofstream ${1:afile}("${2:filename.txt}", std::ios::out);\nif (${1:afile}.is_open()) {\n\t${1:afile} << "${3:This is a line.}\\\\n";\n\t${1:afile}.close();\n}'
  'input file':
    'prefix': 'inf'
    'body': 'std::ifstream ${1:afile}("${2:filename.txt}", std::ios::in);\nif (${1:afile}.is_open()) {\n\tstd::string line;\n\twhile (std::getline(${1:afile}, line)) {\n\t\tstd::cout << line << \'\\\\n\';\n\t}\n\t${1:afile}.close();\n}\nelse {\n\tstd::cerr << "Unable to open file\\\\n";\n}'
